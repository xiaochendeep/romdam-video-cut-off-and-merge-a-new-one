package main

import (
	"fmt"
	"math/rand"
	"os/exec"
	"path/filepath"
	"strconv"
	"time"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/widget"
)

// 随机抽取片段
func extractClips(videoPath string, clipDuration int, numClips int) ([]string, error) {
	outputClips := []string{}
	cmdTemplate := "ffmpeg -y -i %s -ss %s -t %d -c:v libx264 -c:a aac %s"

	// 获取视频时长
	durationCmd := exec.Command("ffprobe", "-i", videoPath, "-show_entries", "format=duration", "-v", "quiet", "-of", "csv=p=0")
	output, err := durationCmd.Output()
	if err != nil {
		return nil, fmt.Errorf("无法获取视频时长: %v", err)
	}

	videoDuration, err := strconv.ParseFloat(string(output), 64)
	if err != nil {
		return nil, fmt.Errorf("无法解析视频时长: %v", err)
	}

	if videoDuration < float64(clipDuration*numClips) {
		return nil, fmt.Errorf("视频时长不足以抽取片段")
	}

	rand.Seed(time.Now().UnixNano())
	startTimes := rand.Perm(int(videoDuration) - clipDuration)[:numClips]

	// 抽取片段
	for i, start := range startTimes {
		outputPath := fmt.Sprintf("clip_%d_%d.mp4", time.Now().UnixNano(), i)
		cmd := fmt.Sprintf(cmdTemplate, videoPath, formatTime(start), clipDuration, outputPath)
		err := exec.Command("bash", "-c", cmd).Run()
		if err != nil {
			return nil, fmt.Errorf("生成片段失败: %v", err)
		}
		outputClips = append(outputClips, outputPath)
	}

	return outputClips, nil
}

// 合并片段
func mergeClips(clips []string, output string, enableGPU bool) error {
	listFile := "file_list.txt"
	listContent := ""
	for _, clip := range clips {
		listContent += fmt.Sprintf("file '%s'\n", clip)
	}

	// 写入临时文件
	err := os.WriteFile(listFile, []byte(listContent), 0644)
	if err != nil {
		return fmt.Errorf("无法创建文件列表: %v", err)
	}

	codec := "libx264"
	if enableGPU {
		codec = "h264_nvenc"
	}

	cmd := exec.Command("ffmpeg", "-y", "-f", "concat", "-safe", "0", "-i", listFile, "-c:v", codec, "-c:a", "aac", output)
	err = cmd.Run()
	if err != nil {
		return fmt.Errorf("合并视频失败: %v", err)
	}

	// 删除临时文件
	_ = os.Remove(listFile)
	return nil
}

// 格式化时间为 "hh:mm:ss"
func formatTime(seconds int) string {
	h := seconds / 3600
	m := (seconds % 3600) / 60
	s := seconds % 60
	return fmt.Sprintf("%02d:%02d:%02d", h, m, s)
}

// 主程序
func main() {
	a := app.New()
	w := a.NewWindow("随机视频片段合成工具")

	// 输入视频选择
	inputVideos := widget.NewMultiLineEntry()
	outputPath := widget.NewEntry()

	clipDurationEntry := widget.NewEntry()
	clipDurationEntry.SetText("5")

	numClipsEntry := widget.NewEntry()
	numClipsEntry.SetText("2")

	enableGPU := widget.NewCheck("启用 GPU 加速", nil)
	enableShuffle := widget.NewCheck("乱序片段", nil)

	// 视频选择按钮
	inputSelectButton := widget.NewButton("选择输入视频", func() {
		dialog.ShowFileOpen(func(reader fyne.URIReadCloser, err error) {
			if err != nil || reader == nil {
				return
			}
			inputVideos.SetText(inputVideos.Text + "\n" + reader.URI().Path())
		}, w)
	})

	// 输出路径选择按钮
	outputSelectButton := widget.NewButton("选择输出路径", func() {
		dialog.ShowFileSave(func(writer fyne.URIWriteCloser, err error) {
			if err != nil || writer == nil {
				return
			}
			outputPath.SetText(writer.URI().Path())
		}, w)
	})

	// 开始按钮
	startButton := widget.NewButton("开始生成", func() {
		inputPaths := inputVideos.Text
		output := outputPath.Text

		clipDuration, err := strconv.Atoi(clipDurationEntry.Text)
		if err != nil || clipDuration <= 0 {
			dialog.ShowError(fmt.Errorf("片段时长必须是正整数"), w)
			return
		}

		numClips, err := strconv.Atoi(numClipsEntry.Text)
		if err != nil || numClips <= 0 {
			dialog.ShowError(fmt.Errorf("片段数量必须是正整数"), w)
			return
		}

		if inputPaths == "" || output == "" {
			dialog.ShowError(fmt.Errorf("输入视频和输出路径不能为空"), w)
			return
		}

		// 处理逻辑
		inputVideos := filepath.SplitList(inputPaths)
		allClips := []string{}
		for _, video := range inputVideos {
			clips, err := extractClips(video, clipDuration, numClips)
			if err != nil {
				dialog.ShowError(err, w)
				return
			}
			allClips = append(allClips, clips...)
		}

		if enableShuffle.Checked {
			rand.Shuffle(len(allClips), func(i, j int) {
				allClips[i], allClips[j] = allClips[j], allClips[i]
			})
		}

		err = mergeClips(allClips, output, enableGPU.Checked)
		if err != nil {
			dialog.ShowError(err, w)
			return
		}

		dialog.ShowInformation("完成", "视频已生成！", w)
	})

	// 布局
	form := container.NewVBox(
		widget.NewLabel("输入视频文件:"),
		inputVideos,
		inputSelectButton,
		widget.NewLabel("输出文件路径:"),
		outputPath,
		outputSelectButton,
		widget.NewLabel("每段片段时长 (秒):"),
		clipDurationEntry,
		widget.NewLabel("每视频片段数量:"),
		numClipsEntry,
		enableGPU,
		enableShuffle,
		startButton,
	)

	w.SetContent(form)
	w.Resize(fyne.NewSize(600, 400))
	w.ShowAndRun()
}
